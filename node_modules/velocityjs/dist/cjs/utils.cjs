"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
let number = 0;
const guid = () => {
  return number++;
};
const applyMixins = (derivedCtor, constructors) => {
  constructors.forEach((baseCtor) => {
    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {
      if (name === "constructor") return;
      Object.defineProperty(
        derivedCtor.prototype,
        name,
        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) || /* @__PURE__ */ Object.create(null)
      );
    });
  });
};
const convert = (str) => {
  if (typeof str !== "string") return str;
  let result = "";
  let escape = false;
  for (let i = 0; i < str.length; i++) {
    const c = str.charAt(i);
    let cstr = "";
    if (c >= " " && c <= "~" || c === "\r" || c === "\n") {
      if (c === "&") {
        cstr = "&amp;";
        escape = true;
      } else if (c === '"') {
        cstr = "&quot;";
        escape = true;
      } else if (c === "<") {
        cstr = "&lt;";
        escape = true;
      } else if (c === ">") {
        cstr = "&gt;";
        escape = true;
      } else {
        cstr = c.toString();
      }
    } else {
      cstr = "&#" + c.charCodeAt(0).toString() + ";";
    }
    result = result + cstr;
  }
  return escape ? result : str;
};
const format = (value) => {
  if (Array.isArray(value)) {
    return "[" + value.map((v) => format(v)).join(", ") + "]";
  }
  if (typeof value === "object" && value !== null) {
    if (value.toString.toString().indexOf("[native code]") === -1) {
      return value;
    }
    const kvJoin = (k) => `${k}=${format(value[k])}`;
    return "{" + Object.keys(value).map(kvJoin).join(", ") + "}";
  }
  return value;
};
exports.applyMixins = applyMixins;
exports.convert = convert;
exports.format = format;
exports.guid = guid;

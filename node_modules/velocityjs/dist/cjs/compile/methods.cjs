"use strict";
function hasProperty(context, field) {
  if (typeof context === "number" || typeof context === "string") {
    return context[field] || Object.prototype.hasOwnProperty.call(context, field);
  }
  if (!context) {
    return false;
  }
  return field in context;
}
const matchProperty = (value, notInContext) => ({ property, context }) => value === property && !hasProperty(context, property);
const matchStartWith = (value) => ({ property, context }) => property.indexOf(value) === 0 && !(property in context) && property.length > value.length;
function getter(base, property) {
  if (typeof property === "number") {
    return base[property];
  }
  const letter = property.charCodeAt(0);
  const isUpper = letter < 91;
  const ret = base[property];
  if (ret !== void 0) {
    return ret;
  }
  if (isUpper) {
    property = String.fromCharCode(letter).toLowerCase() + property.slice(1);
  }
  if (!isUpper) {
    property = String.fromCharCode(letter).toUpperCase() + property.slice(1);
  }
  return base[property];
}
function getSize(obj) {
  if (Array.isArray(obj)) {
    return obj.length;
  }
  if (typeof obj === "object" && obj !== null) {
    return Object.keys(obj).length;
  }
  return void 0;
}
const handlers = {
  // $foo.get('bar')
  get: {
    match: matchProperty("get"),
    resolve: ({ context, params }) => getter(context, params[0])
  },
  // $foo.set('a', 'b')
  set: {
    match: matchProperty("set"),
    resolve: ({ context, params }) => {
      context[params[0]] = params[1];
      return "";
    }
  },
  // getAddress()
  getValue: {
    match: matchStartWith("get"),
    resolve: ({ context, property }) => getter(context, property.slice(3))
  },
  isValue: {
    match: matchStartWith("is"),
    resolve: ({ context, property }) => getter(context, property.slice(2))
  },
  // $page.setName(123)
  setValue: {
    match: matchStartWith("set"),
    resolve: ({ context, property, params }) => {
      context[property.slice(3)] = params[0];
      context.toString = () => "";
      return context;
    }
  },
  keySet: {
    match: matchProperty("keySet"),
    resolve: ({ context }) => Object.keys(context)
  },
  entrySet: {
    match: matchProperty("entrySet"),
    resolve: ({ context }) => Object.keys(context).map((key) => ({
      key,
      value: context[key]
    }))
  },
  size: {
    match: matchProperty("size"),
    resolve: ({ context }) => getSize(context)
  },
  put: {
    match: matchProperty("put"),
    resolve: ({ context, params }) => context[params[0]] = params[1]
  },
  add: {
    match: matchProperty("add"),
    resolve: ({ context, params }) => {
      if (typeof context.push !== "function") {
        return;
      }
      return context.push(params[0]);
    }
  },
  remove: {
    match: matchProperty("remove"),
    resolve: ({ context, params }) => {
      if (Array.isArray(context)) {
        let index = params[0];
        if (typeof index !== "number") {
          index = context.indexOf(params[0]);
        }
        const ret = context[index];
        context.splice(index, 1);
        return ret;
      }
      if (typeof context === "object" && context !== null) {
        const ret = context[params[0]];
        delete context[params[0]];
        return ret;
      }
      return void 0;
    }
  },
  subList: {
    match: matchProperty("subList"),
    resolve: ({ context, params }) => context.slice(params[0], params[1])
  }
};
const keys = Object.keys(handlers);
const defaultMethodHandlers = keys.map((key) => ({
  uid: "system: " + key,
  match: handlers[key].match,
  resolve: handlers[key].resolve
}));
module.exports = defaultMethodHandlers;

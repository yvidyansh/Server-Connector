"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const base = require("./base.cjs");
const utils = require("../utils.cjs");
class Compile extends base.Velocity {
  /**
   * @param context {object} context object
   * @param macro   {object} self defined #macro
   * @param silent {bool} if true, $foo variable will be output as is
   * @return str
   */
  render(context, macros, silence) {
    this.silence = !!silence;
    this.context = context || {};
    this.macros = Object.assign(macros || {}, {
      stop: () => {
        this.runState.stop = true;
        return "";
      }
    });
    if (!this.macros.hasOwnProperty("eval")) {
      Object.defineProperty(this.macros, "eval", {
        value: this.eval.bind(this)
      });
    }
    return this.renderAstList();
  }
  renderAstList(asts, contextId) {
    let str = "";
    asts = asts || this.asts;
    if (contextId) {
      if (contextId !== this.contextId && this.conditions.indexOf(contextId) === -1) {
        this.conditions.unshift(contextId);
      }
      this.contextId = contextId;
    } else {
      this.contextId = "";
    }
    asts.forEach((ast) => {
      if (this.runState.stop === true) {
        return false;
      }
      switch (ast.type) {
        case "references":
          str += utils.format(this.getReferences(ast, true));
          break;
        case "set":
          this.setValue(ast);
          break;
        case "break":
          this.runState.break = true;
          break;
        case "macro_call":
          str += this.getMacro(ast);
          break;
        case "comment":
          break;
        case "raw":
          str += ast.value;
          break;
        default:
          str += typeof ast === "string" ? ast : this.getBlock(ast);
          break;
      }
    });
    return str;
  }
}
exports.Compile = Compile;

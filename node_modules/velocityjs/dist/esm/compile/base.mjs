import defaultMethodHandlers from "./methods.mjs";
class Velocity {
  constructor(asts, config) {
    this.context = {};
    this.macros = {};
    this.defines = {};
    this.conditions = [];
    this.local = {};
    this.silence = false;
    this.unescape = {};
    this.contextId = "";
    this.config = {
      /**
       * if escapeHtml variable, is set true
       * $foo value will handle by escapeHtml
       */
      escape: false,
      // whiteList which no need escapeHtml
      unescape: {},
      valueMapper(value) {
        return value;
      }
    };
    this.macrosStore = {};
    this.runState = { stop: false, break: false };
    this.asts = asts;
    const customMethodHandlers = ((config == null ? void 0 : config.customMethodHandlers) ?? []).concat(defaultMethodHandlers);
    Object.assign(this.config, config, { customMethodHandlers });
  }
  /* istanbul ignore next */
  render(_context, _macros, _silence) {
    return "";
  }
  /* istanbul ignore next */
  getReferences(_ast, _isVal) {
    return "";
  }
  /* istanbul ignore next */
  getLiteral(_ast) {
    return "";
  }
  /* istanbul ignore next */
  getExpression(_ast) {
    return "";
  }
  /* istanbul ignore next */
  setValue(_ast) {
    return;
  }
  /* istanbul ignore next */
  getBlock(_ast) {
    return "";
  }
  /* istanbul ignore next */
  getMacro(_ast) {
    return "";
  }
  /* istanbul ignore next */
  evalStr(_str) {
    return "";
  }
  /* istanbul ignore next */
  eval(str, _local) {
    return str;
  }
}
export {
  Velocity
};

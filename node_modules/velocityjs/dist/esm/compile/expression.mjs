import { applyMixins } from "../utils.mjs";
import { Compile } from "./base-compile.mjs";
class Expression extends Compile {
  /**
   * Expression evaluation, mainly for mathematical expressions, logical operations and comparison operations.
   * For basic data types at the lowest level, getLiteral is used for evaluation.
   * When getLiteral encounters references, getReferences is used for evaluation.
   */
  getExpression(ast) {
    if (ast.type !== "math") {
      return this.getLiteral(ast);
    }
    const exp = ast.expression;
    let ret;
    switch (ast.operator) {
      case "+":
        ret = this.getExpression(exp[0]) + this.getExpression(exp[1]);
        break;
      case "-":
        ret = this.getExpression(exp[0]) - this.getExpression(exp[1]);
        break;
      case "/":
        ret = this.getExpression(exp[0]) / this.getExpression(exp[1]);
        break;
      case "%":
        ret = this.getExpression(exp[0]) % this.getExpression(exp[1]);
        break;
      case "*":
        ret = this.getExpression(exp[0]) * this.getExpression(exp[1]);
        break;
      case "||":
        ret = this.getExpression(exp[0]) || this.getExpression(exp[1]);
        break;
      case "&&":
        ret = this.getExpression(exp[0]) && this.getExpression(exp[1]);
        break;
      case ">":
        ret = this.getExpression(exp[0]) > this.getExpression(exp[1]);
        break;
      case "<":
        ret = this.getExpression(exp[0]) < this.getExpression(exp[1]);
        break;
      case "==":
        ret = this.getExpression(exp[0]) == this.getExpression(exp[1]);
        break;
      case ">=":
        ret = this.getExpression(exp[0]) >= this.getExpression(exp[1]);
        break;
      case "<=":
        ret = this.getExpression(exp[0]) <= this.getExpression(exp[1]);
        break;
      case "!=":
        ret = this.getExpression(exp[0]) != this.getExpression(exp[1]);
        break;
      case "minus":
        ret = -this.getExpression(exp[0]);
        break;
      case "not":
        ret = !this.getExpression(exp[0]);
        break;
      case "parenthesis":
        ret = this.getExpression(exp[0]);
        break;
      default:
        return;
    }
    return ret;
  }
}
applyMixins(Compile, [Expression]);
export {
  Expression
};

import { CompileConfig, Macros, Param, RenderContext, SetAST, VELOCITY_AST } from '../type';
export declare class Velocity {
    context: RenderContext;
    protected macros: Record<string, Function>;
    protected defines: Record<string, VELOCITY_AST[]>;
    protected conditions: string[];
    protected local: Record<string, unknown>;
    protected silence: boolean;
    protected unescape: {};
    protected contextId: string;
    protected config: CompileConfig;
    protected macrosStore: Record<string, {
        asts: VELOCITY_AST[];
        args: Param[];
    }>;
    protected asts: VELOCITY_AST[];
    protected runState: {
        stop: boolean;
        break: boolean;
    };
    constructor(asts: VELOCITY_AST[], config?: CompileConfig);
    render(_context?: RenderContext, _macros?: Macros, _silence?: boolean): string;
    protected getReferences(_ast: VELOCITY_AST, _isVal?: boolean): string;
    protected getLiteral(_ast: VELOCITY_AST): string;
    protected getExpression(_ast: VELOCITY_AST): string;
    protected setValue(_ast: SetAST): void;
    protected getBlock(_ast: VELOCITY_AST[]): string;
    protected getMacro(_ast: VELOCITY_AST): string;
    protected evalStr(_str: string): string;
    protected eval(str: string, _local?: object): string;
}
